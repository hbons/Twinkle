//   Twinkle, automatic syncing with Git
//   Copyright (C) 2025  Hylke Bons (hello@planetpeanut.studio)
//
//   This program is free software: you can redistribute it and/or modify it
//   under the terms of the GNU General Public License v3 or any later version.


use std::error::Error;
use std::fs;
use std::path::Path;

use crate::git::objects::repository::GitRepository;
use crate::git::objects::user::GitUser;
use crate::ssh::objects::url::SshUrl;


pub fn twinkle_default_init(repo: &GitRepository) -> Result<(), Box<dyn Error>> {
    // .git/config
    for (option, value) in twinkle_default_settings() {
        repo.git.config_set(option, value)?;
    }

    // .git/info/exclude
    let rules = twinkle_default_exclude_rules();
    repo.write_exclude_rules(rules)?;

    // .git/info/attributes
    let rules = twinkle_default_attribute_rules();
    repo.write_attribute_rules(rules)?;

    repo.git.lfs_config_filters()?;
    repo.git.lfs_install_pre_push_hook()?;

    Ok(())
}


pub fn twinkle_default_settings() -> Vec<(&'static str, &'static str)> {
    // Docs: https://git-scm.com/docs/git-config#_variables

    vec![
        ("core.attributesFile", ""), // Ignore the system and user attributes files
        ("core.autocrlf", "input"), // Text files will keep original line endings when checked out, CRLF chars are normalized to LF when committed
        ("core.excludesFile", ""), // Ignore the system and user gitignore files
        ("core.fileMode", "false"), // Ignore permission changes
        ("core.ignoreCase", "false"), // Be case sensitive explicitly to work on Mac
        ("core.precomposeUnicode", "true"), // Use the same Unicode form on all filesystems
        ("core.quotePath", "false"), // Output Unicode characters: '"h\303\251"' becomes 'hé'
        ("core.safecrlf", "false"),
        ("push.default", "current"),
        ("submodule.recurse", "false"), // Ignore submodules

        // Commit signing
        ("commit.gpgSign", "true"),
        ("tag.gpgSign", "true"),
        ("gpg.format", "ssh"),

        // Some memory limiting options
        ("core.packedGitLimit", "128m"),
        ("core.packedGitWindowSize", "128m"),
        ("pack.deltaCacheSize", "128m"),
        ("pack.packSizeLimit", "128m"),
        ("pack.windowMemory", "128m"),
    ]
}


pub fn twinkle_default_exclude_rules() -> Vec<String> {
    // Docs: https://git-scm.com/docs/gitignore

    let rules = vec![
        "*.autosave", // Various autosaving apps
        ".*.sw[a-z]", "*.un~", "*.swp", "*.swo", // vi(m)
        "*~", // gedit and emacs
        ".~lock.*", // LibreOffice
        "*.part", "*.crdownload", // Firefox and Chromium temporary download files
        "*.kate-swp", // Kate
        ".directory", // Dolphin
        ".DS_Store", "Icon\r", "._*", ".Spotlight-V100", ".Trashes", // macOS
    ];

    rules.iter().map(|s| s.to_string()).collect()
}


pub fn twinkle_default_attribute_rules() -> Vec<String> {
    // Docs: https://git-scm.com/docs/gitattributes

    let mut rules: Vec<String> = Vec::new();
    rules.push(twinkle_default_file_warning().into());

    // Treat all files as binary so merges trigger unresolvable conflicts that we can then fix
    rules.push("* merge=binary".into());
    rules
}


pub fn twinkle_default_file_warning() -> &'static str {
    "# Generated by Twinkle. Please don't edit.\n"
}


pub fn twinkle_default_welcome(url: &SshUrl) -> String {
    let url = url.original.clone();

    format!(
        "Hello! This folder has been successfully set up to sync with `{url}`.\n\
         \n\
         If you like Twinkle, help me sustain it with [€1](https://planetpeanut.studio/sustain-twinkle).\n\
         \n\
         Thank you. :)\n\
         \n\
         Hylke\n\
         \n"
    )
}


pub fn twinkle_default_commit(repo: &GitRepository) -> Result<(), Box<dyn Error>> {
    let name = "TWINKLE.md";
    let path = repo.git.working_dir.join(name);
    fs::write(path, twinkle_default_welcome(&repo.remote_url))?;

    let user = twinkle_default_git_user()?;

    repo.git.add(Path::new(name))?;
    repo.git.commit(&user, "Set up Twinkle")?;

    Ok(())
}


pub fn twinkle_default_git_user() -> Result<GitUser, Box<dyn Error>> {
    "Twinkle <twinkle@localhost>".parse::<GitUser>()
}


pub fn twinkle_default_polling_interval() -> u64 {
    90 // seconds
}


pub fn twinkle_default_lfs_threshold() -> u64 {
    3 * 1024 // 3 KB
    // 3 * 1024 * 1024 // 3 MB
}


pub fn twinkle_default_branch() -> &'static str {
    "main"
}
